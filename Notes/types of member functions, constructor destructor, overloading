Types of Member Functions of a class 
	
	Inline Functions 
	Static Functions 
	Friend Functions
	Simple Functions 
	Const Functions 
	
#Const Functions 

	These functions can never modify any of the objects data 

#Friend Functions 
	Declaring a global fucntion as a frined inside the class will allow the functions to 		access the class data from outside the function. 	
	
#Inline Functions 
	Just like predecessor macro's
	
	Copied @ compile time 
	
	Functions defined inside the class is Inline function by default 
	
	Inline functions does increase the efficiency but they should not be used for larger 
	functions since it can result in code boalt. 
	
	Use the scope resolution operator ::  to define bigger functions outside the class. 

Function Overloading 

	You can overload functions by either 
		
		* changing the number of arguments
		
		* changing the type of the arguments 

Default Arguments 

	sum(int x,int y=45)
	{
		cout<<x+y;
	}
	
	A call to this function without the second parameter wont result in a error 
	
	sum(100) will output 145 
	sum(10,10) will output 20
	
	only the last argument can be made default, once you put a default value 
	all the subsequent values after that should be made default value 
	
	sum(int x, int y=9,int z) // Incorrect 
	sum(int x,int y=3, int k =0) // Correct 
	
Constructors 
	
	Helps to initialise the object members when a object is being created 
	
	Name of the constructor is the same as the name of the class 
	
	Constructors can be defined within the class or outside the class 
	
	Types 
	
	Parameterized Constructor
	
	Copy Constructor
	
	Default Constructor 
		Works when there is no constructor defined as such in the the class 
		and in this case the value will be initialised to default one by the compiler 
		
		Or we can even define one 
	
		class Cube {
		int side;
		public:
		Cube(int x) //Constructor with the same name as that of class
		{
		size = 10;
		}
		
		int main(){
		Cube c;
		cout<<c.side; //outputs 10
		}
		
Constructor Overloading 

	We can also overload the constructors 
	Example 
	
	class student {
	string name;
	int roll;
	
	student(int rolle){
		roll =roll;
		}
	
	student(int rolle,string str){
		roll = rolle;
		name = str;
		}
	}
	
	int main(){
		
		student s1;
		student s2;
		s(100); //this wil call the first constructor 
		s(100, sudev) /second one 
	}
	
	Note : When we do write a  constructor we will have to be write a default one too so that 
	student s; wont be ending up in a error.Or use the operator overloading along with the default values to 
	overcome this problem. http://www.studytonight.com/cpp/constructors-and-destructors-in-cpp.php
	
	https://github.com/sudev/dsa/blob/master/C-Intro/C%2B%2B/Class/constructor-destructor.cxx 
	Constructor destructor call sequence 

		
	
